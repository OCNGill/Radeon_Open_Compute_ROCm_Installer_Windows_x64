# This workflow has been through a legendary number of iterations to get GitHub Actions to recognize and run it. If you are reading this, it finally worked!
# Trigger: push to tags v* or manual dispatch
name: Build and Release ROCm Installer

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure WiX Toolset is installed
        shell: powershell
        run: |
          Write-Host "STEP: Ensure WiX Toolset"
          $found = Get-Command candle.exe -ErrorAction SilentlyContinue
          if (-not $found) {
            Write-Host "WiX Toolset not found. Installing via Chocolatey..." -ForegroundColor Cyan
            choco install wixtoolset -y
            Write-Host "WiX Toolset installed" -ForegroundColor Green
          } else {
            Write-Host "WiX Toolset already installed at: $($found.Path)" -ForegroundColor Green
          }

      - name: Extract Version from Tag
        id: get_version
        shell: powershell
        run: |
          Write-Host "STEP: Extract Version from Tag"
          $tag = "${{ github.ref_name }}"
          $version = $tag -replace '^v', ''
          if ($version -notmatch '^[\d\.]+$') {
            $version = "1.3.2.1"
          } elseif ($version -notmatch '\.\d+\.\d+$') {
            $version = "$version.0.0"
          }
          Write-Host "Extracted version: $version" -ForegroundColor Yellow
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create Self-Signed Certificate
        shell: powershell
        run: |
          Write-Host "STEP: Create Self-Signed Certificate"
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=ROCm Community Developer, O=RoCm Community, C=US" -KeyAlgorithm RSA -KeyLength 2048 -CertStoreLocation "Cert:\CurrentUser\My" -NotAfter (Get-Date).AddYears(3)
          $password = ConvertTo-SecureString -String "ROCmInstaller2025" -Force -AsPlainText
          $pfxPath = Join-Path $env:TEMP "codesign.pfx"
          Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $password
          echo "PFX_PATH=$pfxPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PFX_PASSWORD=ROCmInstaller2025" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build MSI Installer
        shell: powershell
        run: |
          Write-Host "STEP: Build MSI Installer"
          Push-Location ROCm_windows_installer_x64
          .\build_installer.ps1 -Configuration Release -Version "$env:VERSION" -Clean
          $msi = Get-ChildItem -Path "bin\Release" -Filter "*.msi" -Recurse | Select-Object -First 1
          if (-not $msi) { throw "MSI file not found after build" }
          $targetName = "ROCm_windows_x64_$env:VERSION.msi"
          $targetPath = Join-Path (Split-Path $msi.FullName) $targetName
          Move-Item -Path $msi.FullName -Destination $targetPath -Force
          Write-Host "MSI built and renamed: $targetPath" -ForegroundColor Green
          echo "MSI_PATH=$targetPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Pop-Location

      - name: Sign MSI with Self-Signed Certificate
        shell: powershell
        run: |
          Write-Host "Signing MSI installer..." -ForegroundColor Cyan
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter "signtool.exe" | Select-Object -First 1 -ExpandProperty FullName
          & $signtool sign /f "$env:PFX_PATH" /p "$env:PFX_PASSWORD" /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /d "ROCm Windows Installer" "$env:MSI_PATH"
          if ($LASTEXITCODE -eq 0) {
            Write-Host "MSI signed successfully" -ForegroundColor Green
            & $signtool verify /pa "$env:MSI_PATH"
          } else {
            Write-Host "Warning: Signing completed with warnings" -ForegroundColor Yellow
          }

      - name: Generate Checksums
        shell: powershell
        run: |
          Write-Host "Generating checksums..." -ForegroundColor Cyan
          $sha256 = (Get-FileHash -Path "$env:MSI_PATH" -Algorithm SHA256).Hash
          $md5 = (Get-FileHash -Path "$env:MSI_PATH" -Algorithm MD5).Hash
          $msiName = Split-Path -Leaf "$env:MSI_PATH"
          "$sha256  $msiName" | Out-File -FilePath "$env:MSI_PATH.sha256" -Encoding utf8
          "$md5  $msiName" | Out-File -FilePath "$env:MSI_PATH.md5" -Encoding utf8
          echo "SHA256=$sha256" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Copy MSI to Repository Root
        shell: powershell
        run: |
          $rootMsi = "ROCm_windows_x64_1.3.msi"
          Copy-Item -Path "$env:MSI_PATH" -Destination $rootMsi -Force
          Write-Host "MSI copied to root: $rootMsi" -ForegroundColor Green
          echo "ROOT_MSI_PATH=$rootMsi" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create Release Notes
        id: release_notes
        shell: powershell
        run: |
          $notes = "# ROCm Windows Installer v$env:VERSION`n`nThis is a stability release that fixes numerous issues with the automated build pipeline.`n`n## ?? One-Click Installation for AMD GPUs`n`n**Download the MSI installer below and run as Administrator.**`n`n### ?? Security Notice`nThis installer is signed with a self-signed certificate for testing and community distribution.`n**Windows SmartScreen will show a warning** - this is expected for self-signed applications.`n`nTo install:`n1. Click `"More info`" on the SmartScreen warning`n2. Click `"Run anyway`"`n3. Follow the installation wizard`n`
